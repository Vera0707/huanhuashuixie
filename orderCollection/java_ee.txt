第一章

    1.软件: 系统软件 vs 应用软件

    2.人与计算机做交互:使用计算机语言
         图形化界面 vs 命令行方式

    3.语言的分类:
        第一代语言 机器语言
        第二代语言 汇编语言
        第三代语言 高级语言 （面向过程 -->面向对象）

    4.java语言的特性:
        ① 面向对象性
        ② 健壮性
        ③ 跨平台性 white once,run anywhere --JVM(JAVA虚拟机 直接作用在计算机之上 同时垃圾回收)

    5.安装JDK及配置环境变量
        1)傻瓜式安装JDK
        2)配置path:window(在执行命令时所有搜寻的路径)环境变量
          我们需要将JDK中的bin目录: D:\JAVA\jdk1.7.0.07\bin保存在path环境变量下
        3)测试:在命令行窗口,任意的文件目录下,执行javac.exe或者java.exe都可以调用成功

        >河床好比操作底层,jdk好比是水,java应用程序好比是船
        注意: jdk jre jvm
    6.如何编写并运行第一个java程序
        [过程]编写--编译--运行
        1)编写 : 每一个java文件都是.java结尾的源文件[HelloWord] java程序就存在于源文件中
            class HelloWord{
                //程序主方法 是程序的入口
                public static void main(String[] args){
                    //要执行的代码
                    System.out.prinlt("Hello World");

                }
             }

             1.源文件是以.java为扩展名,源文件的基本组成是类
             2.一个源文件中最多只能有一个public类.其他类的个数不限.如果源文件包含一个public类,则文件名必须按照该类名命名
             3.java应用程序的执行入口是main方法.它有固定的书写格式 : public static void main(String[] args){ ... }
             4.java语言严格区分大小写
             5.java方法由一条条语句构成,每个语句由";"结束
             6.大括号都是成对出现的,缺一不可
        2)编译:在源文件所在的目录下执行 执行javac.exe --生成-->诸多个.class结尾的字节码文件
        3)运行:生成的字节码文件通过java.exe解释执行
    7.会调试程序中出现的问题
    8.注释: ①单行注释 // ②多行注释 /* */ 多行注释不能嵌套 ③文档注释 /** */
    9.JDK提供的关于旗下所有的包/类的文档API




第二章
1.  1)关键字
    2)保留字
    2)标识符:凡是自己可以起名字的地方都叫标志符
2. 命名规则 一定要遵守
3. java中的名称命名规则 不遵守不会报错
4. 变量
    java中的变量按照数据类型来分类:
        基本数据类型
          整型: byte(1 bit) short(2 bit) int(4 bit) long(8 bit)
          浮点型: float(4 bit) double
          字符型: char
          布尔型: boolean(只能取值位true false)
5.逻辑运算符 & | && || ^ !
    a         b       a&b     a|b     !a        a^b      a&&b     a||b
    true     true    true     true    false    false     true     true
    true     false   false    true    false    true      false    true
    false    true    false    true    true     true      false    true
    false    false   false    false   true     false     false    false

    & 和 && 的区别:
        & 不管左边是true 还是false 右边都会执行
        && 当左边为false时,右边不运算
    | 和 || 的区别
         | : 当左端为true时,右侧照样做运算
         ||: 当左端为true时,右端不再进行运算

6.位运算
    << 左移
    >> 右移
    >>> 无符号右移
    & 与运算
    | 或运算
    ^ 异或运算
    ~ 反码





第三章
1.面向对象和面向过程区别
2.面向对象编程关注于类的设计
    1）一个项目或者工程不管多复杂，一定是由一个一个类构成
    2）类是抽象的，好比是制造汽车的图纸
       而具体的车是根据图纸建造的，实际上就是对象
3.完成一个项目(工程)的思路
    1）所有完成的功能对应的类的对象是否存在
    2）若存在，则通过对象直接调用对应类中的属性和方法即可
    3）若不存在，需要创建类的对象。甚至说，类都不存在，就需要设计这个类
4.面向对象编程的三条主线
    1）类及类的构成成分： 属性 方法 构造器 代码块 内部类
    2）面向对象编程特征： 封装性 继承性 多态性(抽象性)
    3）其他的关键字：this super package import static abstract interface
5.类及对象
    1）关于类的设计
    2）类的组成成分
        ① 属性（成员变量）
            成员变量 vs 局部变量
            相同点： 1 遵循变量声明的格式 数据类型 变量名 = 初始化值
                    2 都有作用域
            不同点： 1 声明的位置不同
                        成员变量声明在类里，方法外
                        局部变量声明在方法内，方法的形参部分，代码块内
                    2 成员变量的修饰符有四个 public private protected 缺省
                      局部变量没有修饰符，与所在的方法修饰符相同
                    3 初始化值 一定会有初始化值
                        成员变量 如果有声明的时候，不显示的赋值，那么不同数据类型会有不同的默认初始化值
                    4 二者在内存中存放的位置不同；成员变量存在于堆空间中，局部变量在栈空间中
            总结： 关于变量的分类
                    1 按照数据类型的不同 基本数据类型（8种） & 引用数据类型
                    2 按照声明的位置不同 成员变量 & 局部变量
        ② 方法（成员方法/函数）
6.面向对象编程的思想落地法则之一
    1）设计并创建类的成分
    2）实例化对象
    3）通过"对象.属性"或"对象.方法"的形式完成某项功能
7.类的初始化的内存解析
    内存划分的结构：
        栈(stack) 局部变量 对象的引用名 数组的引用名
        堆(heap) new出来的"东西"（如：对象的实体，数组的实体） 含成员变量
        方法区 包含字符转常量
        静态域 声明为static的变量
8. 方法的重载
    1） 同一个类中
    2） 方法名相同
    3） 方法的参数列表不同【参数个数不同/参数类型不同】
    补充 方法的重载与方法的返回值类型没有关系
9. 匿名类对象
    1.匿名类对象：创建的类的对象是匿名的
        当我们只需要一次调用类的对象时，我们就可以考虑使用匿名的方式创建类的对象
        创建的匿名类的对象只能调用一次
    2.可变个数的形参方法
        1）格式：对于方法的形参，数据类型... 形参名
        2）可变个数形参的方法与同名的方法之间构成重载
        3）可变个数的形参在调用时，个数从0个开始。到无穷多个都可以
        4）使用可变多个形参的方法与方法的形参使用数组是一致的
        5）若方法中存在可变个数的形参，那一定要声明在方法形参的最后
        6）在方法中最多声明一个可变形参的方法
11. this的用法
    1. 使用在类中,可以用来修饰属性/方法/构造器
    2. 表示当前对象或者当前正在创建的对象
12. 多态性
    1.子类对象的多态性并不适用于属性
    2.子类不会覆盖父类的属性
    3.
      1)多态性的表现
        ①方法的重载与重新
        ②子类的
      2)使用的前提
        ①要有继承关系
        ②要有方法的重写
      3)格式 Person p = new Man()
      4)编译时,认为P是person类型的,故只能执行Person里才有的结构,及Man里特有的结构不能调用
13. super和this
    1) super修饰属性和方法:
        在子类的方法/构造器中,通过super属性或者super方法的形式,显式的调用父类的执行属性和方法
        尤其是,当子类和父类有同名的属性或方法时 super.
14. equal方法
    1. Object是根父类
    2. == :
        1)基本数据类型 : 根据基本数据类型的值判断是否相等 相等返回true 反之返回false
            两段数据类型可以不同 在不同的情况下,也可以饭后true
        2)引用数据类型 : 比较引用变量的地址值
    3.equals() 存在于Object
        1)只能处理引用类型对象
        2)发现两个类型引用地址是否相同
        3)String 包装类 File类 Date类 重新了Object的equals方法 比较的是数值
15. static关键字
    1.静态的,可以用来修饰属性,方法,代码块(或初始化块),内部类
    2.static 修饰属性（类变量）
        1) 由类创建的所有对象都共用这一个属性
        2) 当期中一个对象对比属性进行修改,会导致其他对象对此属性的一个调用 vs 实例变量（非static修饰的属性,各自对象有各自一套副本）
        3) 类变量是随着类的加载而加载的,而且独一份
        4) 随着类的加载而加载
    3.static修饰方法（类方法）
        1) 随着类的加载而加载,在内存中也是独一份
        2) 可以直接通过"类.类方法"的方式调用
        3) 内部可以调用静态的属性或静态的方法,反之,非静态的方法可以静态的类变量

        注:静态的结构（static的属性 方法 代码块 内部类）的生命周期要早于非静态的结构,同时被回收也要晚于非静态类结构

        静态的方法内,不可以有this或super关键字的!
16. final关键字
    1. 可以修饰类 属性和方法
      1) 修饰类 这个类不能被继承 如:String等
      2) 修饰方法 不能被重写 如Object.getClass() --声明为final
      3) 修饰属性 此属性就是一个常量 习惯上,常量用大写字符表示
            此常量不能使用默认初始化
            可以显示赋值
            一旦赋值以后,不能再修改
17. 抽象类 abstract class
    1. 不可被实例化
    2. 抽象类有构造器 【凡是类 都有构造器]
    3. 抽象方法没有方法体
        抽象方法相当于只保留方法的功能,而具体的执行交给抽象类的子类,由子类重写此抽象方法
    4. 抽象方法所在的类一定是抽象类
    5. 抽象类中可以没有抽象方法
    6. 若子类继承抽象类,并重写了所有抽象方法,则此类是一个实体类,及可以实体化
    7. abstract不能用来修饰属性 构造器 private final static
18. 设计模式
    1.解决的问题:如何只让设计的类只能创建一个对象
    2.如何实现:饿汉式 懒汉式
19. java异常
    1.Error
        程序中不进行处理
    2.Exception
        要求在编写程序时,就要考虑到对这些异常的处理
        ①包含
            1.空指针访问
            2.试图读取不存在的文件
            3.网络连接中断
        ②分类
            1.编译时异常:在编译期间出现的异常
            2.执行时异常:在运行期间出现异常
              常见的运行异常
                1. 数组下表越界 ArrayIndexOutOfBoundsException
                2. 算数异常  ArithmeticException
                3. 类型转换异常 ClassCastException
                4. 空指针异常 NullPointerException

        当执行一个程序时,如果出现异常,那么异常之后的代码就不再执行!
    3. Java提供的抓抛模型
        1.抛 当我们执行代码时,一旦出现异常,就会在异常的代码处生成一个对应的异常的对象,并讲此对象抛出
             一旦抛出此异常类的对象,程序就终止运行
             此异常类的对象抛出方法的调用者
        2.抓 抓住上一步抛出来的异常类的对象 如何抓?异常处理方式
             java提供了两种方式用来处理一个异常的对象
             处理方式一
                try{}catch(){}finally{}
